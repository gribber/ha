substitutions:
  name: coffeemaker
  description: "Measures water tank level and displays a gauge"
  encryption_key: !secret api_key
  ota_password: !secret ota_pass
  log_level: DEBUG

packages:
  <<: !include_dir_named common
  board: !include boards/wemos_d1_mini.yaml

mqtt: !remove

# --- time of fligt sensor
i2c:
  sda: GPIO4
  scl: GPIO5
  scan: true
  id: bus_a

sensor:
  - platform: vl53l0x
    id: "water_surface"
    address: 0x29
    update_interval: 1s
    long_range: false
    accuracy_decimals: 3
    filters: 
      - clamp: 
          max_value: 0.229
          ignore_out_of_range: true
      - sliding_window_moving_average:
          window_size: 5
          send_every: 1
    on_value: 
      then:
        - component.update: water_level

  - platform: template
    name: "water_level"
    id: water_level
    unit_of_measurement: "L"
    accuracy_decimals: 2
    lambda: |-
      const float tank_size = 2.0;
      const float tank_empty = 235;
      const float tank_full = 27;
      float level = (id(water_surface).state * 1000) - tank_full;
      if (level < 0.00) {
        level = 0;
      }
      float ml_per_mm = tank_size / (tank_empty - tank_full);
      float amount = tank_size - (ml_per_mm * level);
      return (amount > 0.0 ? amount : 0.0);
    filters: 
      - median: 
          window_size: 5
          send_every: 10
          send_first_at: 5
    on_value: 
      then:
        - component.update: water_level_percentage

  - platform: template
    id: water_level_percentage
    name: "water_level_percentage"
    unit_of_measurement: '%'
    accuracy_decimals: 0
    lambda: |-
      const float tank_size = 2.0;
      return (id(water_level).state / tank_size) * 100;

light:
  - platform: neopixelbus
    type: GRB
    variant: WS2812
    pin: GPIO3
    num_leds: 10
    id: water_level_light
    name: "Water level light"
    restore_mode: RESTORE_DEFAULT_OFF
    on_turn_on:
      then:
        - light.control:
            id: water_level_light
            brightness : 20%
            color_brightness: 20%
            effect: "Level with colors"
    effects:
      - addressable_lambda:
          name: "Level with colors"
          update_interval: 1s
          lambda: |-
            // esphome::Color colors[] = {
            //   Color(255,51,0,0),
            //   Color(255,102,0,0),
            //   Color(255,153,0,0),
            //   Color(255,204,0,0),
            //   Color(255,255,0,0),
            //   Color(255,255,0,0),
            //   Color(204,255,0,0),
            //   Color(153,255,0,0),
            //   Color(102,255,0,0),
            //   Color(51,255,0,0),
            // };
            esphome::Color colors[] = {
              Color(255,0,0,0),
              Color(255,51,0,0),
              Color(255,102,0,0),
              Color(255,153,0,0),
              Color(255,204,0,0),
              Color(255,255,0,0),
              Color(204,255,0,0),
              Color(153,255,0,0),
              Color(102,255,0,0),
              Color(51,255,0,0),
            };
            int plevel = floor(id(water_level_percentage).state/10);
            for (int i = 0; i < it.size(); i++) {
              if (i < plevel) {
                it[i] = colors[i];
              } else {
                it[i] = esphome::Color::BLACK;
              }
            }

