# this automation is supposed to take care of all ambience lights inside the house
# looping each area on each floor and looking for lights with defined ambience labels
# excluding areas with a switch set and turned on with the name input_boolean.noauto_<areaid>
#
- alias: "House: ambience lights"
  id: 8d47c436-0dd0-4db2-a25c-9c020717e11a
  mode: queued
  triggers:
    - trigger: event
      event_type:
        - automation_reloaded

    - trigger: state
      entity_id:
        - input_boolean.house_mode_bright_inside
        - input_boolean.house_mode_bright_hallway

    - trigger: time
      at:
        - input_datetime.time_goodmorning
        - input_datetime.time_goodnight

  variables:
    labels_on: >
      {% set l = [] %}
      {% if today_at(states('input_datetime.time_goodmorning')) < now() and today_at(states('input_datetime.time_goodnight')) > now() %}
        {% if states('input_boolean.house_mode_bright_inside') == "off" %}
          {% set l = l + ['ambience', 'ambience_night'] %}
        {% endif %}
        {% if states('input_boolean.house_mode_bright_hallway') == "off" %}
          {% set l = l + ['ambience_extra'] %}
        {% endif %}
      {% else %}
        {% if states('input_boolean.house_mode_bright_inside') == "off" %}
          {% set l = l + ['ambience_night'] %}
        {% endif %}
      {% endif %}
      {{l}}
    labels_off: >
      {% set all_labels = ['ambience', 'ambience_extra', 'ambience_night']%}
      {{ set(all_labels).difference(labels_on)|list }}

  actions:
    - variables:
        labels: "{{ labels_on }}"
        to_state: "on"
        from_state: "off"
    - &activate
      action: light.turn_{{to_state}}
      data:
        transition: 5
        # profile: relax
      target:
        entity_id: >
          {% set floors = ['nere', 'uppe'] %}
          {% set ns = namespace(e=[], l=[]) %}
          {% for l in labels %}
            {% set ns.l = ns.l + label_entities(l) %}
          {% endfor %}
          {% for floor in floors %}
            {% for area in floor_areas(floor) %}
              {%- if states('input_boolean.noauto_'+area) == 'unknown' or states('input_boolean.noauto_'+area) == "off" %}
                {% for entity in set(area_entities(area)).intersection(ns.l
                  | select('match', 'light.'))
                  | select('is_state', from_state) %}
                  {% set ns.e = ns.e + [entity] -%}
                {% endfor %}
              {%- endif -%}
            {% endfor %}
          {% endfor %}
          {{ns.e}}
    - variables:
        labels: "{{ labels_off }}"
        to_state: "off"
        from_state: "on"
    - *activate
